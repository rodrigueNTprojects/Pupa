pragma solidity ^0.6.12;

import "./AbstractWorklist.sol";

abstract contract <%= nodeName(processId()) %>_AbstractWorlist {
  <%  groupedIds = getWorkItemsGroupByParameters(true);
      groupedIds.forEach(idGroup => {
          var nodeId = idGroup[0]; -%>
    function <%= nodeName(nodeId) %>_start(uint<%= getParameterType(nodeId, true, true, true) %>) virtual external;
  <% }) -%>
  <%  groupedIds = getWorkItemsGroupByParameters(false);
      groupedIds.forEach(idGroup => {
          var nodeId = idGroup[0]; -%>
          <% if(catchingTimers.indexOf(nodeId) < 0) { -%>
    function <%= nodeName(nodeId) %>_complete(uint<%= getParameterType(nodeId, false, true, true) %>) virtual external;
    <% } -%>
  <% }) -%>
  <% if(catchingTimers.length > 0 ) { -%>
    function worklist_Timer_Update(uint, uint) virtual external;
    function check_timer_duration_complete(uint) virtual external;
    function worklist_timer_handling_complete(uint, uint) virtual external;
<%   } -%>
}
contract <%= nodeName(processId()) %>_Worklist is AbstractWorklist {    
    // Events with the information to include in the Log when a workitem is registered
<%  groupedIds = getWorkItemsGroupByParameters(true);
    groupedIds.forEach(idGroup => { -%>
    event <%= nodeName(idGroup[0]) %>_Requested(uint<%= getParameterType(idGroup[0], true, true, true) %>);
<% }) -%>
<%  groupedIds = getWorkItemsGroupByParameters(true);
    groupedIds.forEach(idGroup => {
        var nodeId = idGroup[0]; -%>    
    function <%= nodeName(nodeId) %>_start(uint elementIndex<%= getParameters(nodeId, true, true, true) %>) external {
        <% if(nodeLeadbyTimer.indexOf(nodeId) < 0) { -%>
            workitems.push(Workitem(elementIndex, msg.sender));                     
            emit <%= nodeName(nodeId) %>_Requested(workitems.length - 1<%= getParameters(nodeId, true, false, true) %>);
        <% }  else {-%> 
            uint lastIndex = workitems.length - 1;
            if (workitems[lastIndex].elementIndex != elementIndex) {
                workitems.push(Workitem(elementIndex, msg.sender));                
                emit <%= nodeName(nodeId) %>_Requested(workitems.length - 1<%= getParameters(nodeId, true, false, true) %>);
            }
            <% } -%>
    }
<% }) -%>
<%  groupedIds = getWorkItemsGroupByParameters(false);
    groupedIds.forEach(idGroup => {
        var nodeId = idGroup[0]; -%>
    <% if(catchingTimers.indexOf(nodeId) < 0) { -%>
    function <%= nodeName(nodeId) %>(uint workitemId<%= getParameters(nodeId, false, true, true) %>) external {
       require(workitemId < workitems.length && workitems[workitemId].processInstanceAddr != address(0) && canPerform(msg.sender, workitems[workitemId].processInstanceAddr, workitems[workitemId].elementIndex));                    
        <%= nodeName(processId()) %>_AbstractWorlist(workitems[workitemId].processInstanceAddr).<%= nodeName(nodeId) %>_complete(workitems[workitemId].elementIndex<%= getParameters(nodeId, false, false, true) %>);
        workitems[workitemId].processInstanceAddr = address(0);      
    }   
    <% } -%> 
<% }) -%>
<% if(catchingTimers.length > 0 ) { -%>
   function Worklist_Timer_global(uint workitemId, uint blockTime) external {
        require(workitems[workitemId].processInstanceAddr != address(0));        
        <%= nodeName(processId()) %>_AbstractWorlist(workitems[workitemId].processInstanceAddr).worklist_Timer_Update(workitems[workitemId].elementIndex, blockTime);
    }
    function check_timer_duration(uint workitemId) external {
        require(workitemId < workitems.length && workitems[workitemId].processInstanceAddr != address(0) && canPerform(msg.sender, workitems[workitemId].processInstanceAddr, workitems[workitemId].elementIndex));
      <%= nodeName(processId()) %>_AbstractWorlist(workitems[workitemId].processInstanceAddr).check_timer_duration_complete(workitems[workitemId].elementIndex);
    }
    function worklist_timer_handling(uint workitemId, uint _duration) external {
       require(workitemId < workitems.length && workitems[workitemId].processInstanceAddr != address(0) && canPerform(msg.sender, workitems[workitemId].processInstanceAddr, workitems[workitemId].elementIndex));        
        <%= nodeName(processId()) %>_AbstractWorlist(workitems[workitemId].processInstanceAddr).worklist_timer_handling_complete(workitems[workitemId].elementIndex, _duration);        
    }
<%   } -%>
}
